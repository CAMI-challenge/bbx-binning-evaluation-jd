#!/usr/bin/env python
# This script generates a tab-separated file with taxonomic path information
# about predicted sequences or other entities. The first column contains the
# name of the sequence/entity and each column starting from column two holds
# the name of consecutively higher ranking taxa (NCBI taxonomy). Each column
# corresponds to a common rank, empty fields mean that there is no taxon
# assigned at the given rank.
#
# Example:
# entity_name\trank_name_A\trank_name_B...
#
# where \t means TAB separation and after the entity name there can be as many
# columns as you which but at least one.
#
# Input:
# The input is analogous to the output but restricted to only two columns,
# the first being the sequence identifier and the second an NCBI taxonomic ID.
# This corresponds to common output of taxonomic assignment tools like MEGAN or
# PhyloPythia(S)
#
# Conventions:
# a) Comment lines in input must start with '#' (first character)
# b) The first output line, if starting with '#' will give the name of the ranks

# suppress warnings with TaxonomyNcbi package
import warnings
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=DeprecationWarning)
    from scripts.NcbiTaxonomy.ncbitaxonomy import NcbiTaxonomy

header = lambda ranks: "#identifier\t%s" % ("\t".join(ranks))

# print information on usage
def Usage():
    print >> stderr, 'Usage: ', argv[0], '--taxonomy-dir ./ncbi-taxonomy/ --ranks genus,family,order'

if __name__ == "__main__":
    from sys import stdin, stderr, exit, argv
    import getopt

    # parse command line options
    try:
        opts, args = getopt.getopt(argv[1:], 'ht:r:i', ['help', 'taxonomy-dir=', 'ranks=', 'show-identifiers'])
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err)  # will print something like "option -a not recognized"
        Usage()
        exit(2)

    # defaults
    ranks = ["species", "genus", "family", "order", "class", "phylum", "superkingdom"]
    show_as_name = True
    taxonomy_dir = None
    unknown_class = ""

    # option parsing
    for o, a in opts:
        if o in ("-h", "--help"):
            Usage()
            exit()
        # elif o in ("-t", "--taxonomy-backend-file"):
        elif o in ("-t", "--taxonomy-dir"):
            taxonomy_dir = a
        elif o in ("-u", "--unknown-class"):
            unknown_class = a
        elif o in ("-r", "--ranks"):
            ranks = a.split(",")
        elif o in ("-i", "--show-identifiers"):
            show_as_name = False
        else:
            assert False, "unhandled option"

    if not taxonomy_dir:
        print >> stderr, "you must specify a taxonomy file"
        Usage()
        exit(3)

    # handle broken pipes
    import signal

    signal.signal(signal.SIGPIPE, signal.SIG_DFL)

    # be verbose
    print >> stderr, 'Using taxonomy file %s' % taxonomy_dir
    print >> stderr, 'Using ranks %s' % ",".join(ranks)

    taxonomy = NcbiTaxonomy(taxonomy_dir, False, verbose=False)
    rank2pos = dict((v, i) for i, v in enumerate(ranks))

    print header(ranks)
    for line in stdin:
        if line[0] != "#":
            line = line.rstrip()
            try:
                ident, taxid = line.split("\t")[:2]
            except ValueError:
                stderr.write("error parsing, skipping line \"%s\"" % line)
                continue
            path = taxonomy.get_lineage_of_legal_ranks(taxid, ranks, default_value=unknown_class, as_name=show_as_name, inherit_rank=True)
            print "%s\t%s" % (ident, "\t".join(path))

