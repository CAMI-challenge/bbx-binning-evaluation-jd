#!/bin/bash
#
#   evaluate-binning.bash - Generates statistics for binning results and writes
#                           them in a CAMI-compliant form, for use in a Docker
#                           container
#
#   Written in 2015 by Johannes Dr√∂ge johannes.droege@uni-duesseldorf.de
#
#   To the extent possible under law, the author(s) have dedicated all copyright
#   and related and neighboring rights to this software to the public domain
#   worldwide. This software is distributed without any warranty.
#
#   You should have received a copy of the CC0 Public Domain Dedication along
#   with this software. If not, see
#   http://creativecommons.org/publicdomain/zero/1.0/

set -o errexit
set -o nounset

required_programs="ncbitax2sqlite tax2racol confusionmatrix cmat2perbinstats cmat2summarystats fasta-seqlen fastq-seqlen sort md5sum binning2tsv"
# Check for required programs
for cmd in $required_programs; do
  if test -z "$(which "$cmd")"; then
    echo "'$cmd' not found in PATH."
    exit 1
  fi
done

# functions
taxonomy_version() { cat "$@" | awk -F '\t' '{if($1 != $3) print $1 "\t" $3}' | LC_COLLATE=C sort -u | md5sum | cut -d ' ' -f 1; }  # taxonomy hash

# input variables
cache="$BBX_CACHEDIR"
fastafile="$bbx_arguments_sequences_path"
gold_binningfile="$bbx_arguments_labels_path"
pred_binningfile="$bbx_arguments_predictions_path"

# some assertions
if [ ! "$(cut -d '.' -f 1-2 <<<$bbx_version)" == '0.10' ]; then
  echo "Bioboxes.org input definition is '$bbx_version', not '0.10'."
  exit 1
fi

if [ ! -r "$gold_binningfile" ]; then
  echo "Cannot read input label binning file '$gold_binningfile'."
  exit 1
fi

if [ ! -r "$pred_binningfile" ]; then
  echo "Cannot read input prediction binning file '$pred_binningfile'."
  exit 1
fi

if [ ! -r "$fastafile" ]; then
  echo "Cannot read input FASTA file '$fastafile'."
  exit 1
fi


# general cached variables
goldversion="$(md5sum < "$gold_binningfile" | cut -d ' ' -f 1)"
seqlenfile="$cache/gold_${goldversion}.seqlen"

# general temporary variables
tmpdir="$(mktemp -d -p $cache)"
chmod 755 "$tmpdir"
# echo "Temp dir: '$tmpdir'"

# general refresh cache
ISGZ=$(file -i $fastafile | cut -d' ' -f2)
if [[ "$ISGZ" == "application/gzip;" ]]; then # compressed
	echo "Detected compressed sequence file"
	if [[ $bbx_arguments_sequences_format == "bioboxes.org:/fastq" ]]; then
		echo "Analysing fastq sequence file"
		[ ! -r "$seqlenfile" ] && awk 'NR % 8 == 1 || NR % 8 == 2' <(gzip -dc $fastafile) | fastq-seqlen > "$seqlenfile"
	elif [ $bbx_arguments_sequences_format == "bioboxes.org:/fasta" ]; then
		echo "Analysing fasta sequence file"
		[ ! -r "$seqlenfile" ] && zcat $fastafile | fasta-seqlen > "$seqlenfile"
	else
		echo "Unknown: $bbx_arguments_sequences_id"
		exit 1
	fi
else # raw file
	echo "Detected raw sequence file"
	if [[ $bbx_arguments_sequences_format == "bioboxes.org:/fastq" ]]; then
		echo "Analysing fastq sequence file"
		[ ! -r "$seqlenfile" ] && awk 'NR % 8 == 1 || NR % 8 == 2' $fastafile | fastq-seqlen > "$seqlenfile"
	elif [ $bbx_arguments_sequences_format == "bioboxes.org:/fasta" ]; then
		echo "Analysing fasta sequence file"
		[ ! -r "$seqlenfile" ] && cat $fastafile | fasta-seqlen > "$seqlenfile"
	else # fasta
		echo "Unknown: $bbx_arguments_sequences_id"
		exit 1
	fi
fi

pred_ic="unassigned"

func_supervised ()
{
  gold_bin_file=$1
  query_bin_file=$2
  seq_len_file=$3
  prefix=$4
  btype=${5:-taxon}

  # echo "supervised g:${gold_bin_file} q:$query_bin_file"
  taxdir="$bbx_arguments_databases_taxonomy_path"

  if ! [ -d "$taxdir" -a -r "$taxdir/names.dmp" -a -r "$taxdir/nodes.dmp" ]; then
    echo "Cannot read input taxonomy in '$taxdir'."
    exit 1
  fi

  # simple variables
  ranks='species,genus,family,order,class,phylum,superkingdom'
  pred_taxfile="$tmpdir/${prefix}pred.tax"
  pred_racolfile="$tmpdir/${prefix}pred.racol"
  taxversion="$(taxonomy_version "$taxdir/nodes.dmp")"
  #taxsqlite="$cache/ncbi-taxonomy_${taxversion}.sqlite"

  # cached variables
  gold_taxfile="$cache/${prefix}gold_${goldversion}.tax"
  gold_racolfile="$cache/${prefix}gold_${goldversion}_${taxversion}.racol"
  
  # refresh cache
  #[ ! -r "$taxsqlite" ] && ncbitax2sqlite -dmp "$taxdir" -db "$taxsqlite"
  [ ! -r "$gold_taxfile" ] && binning2tsv --type taxon < "${gold_bin_file}" > "$gold_taxfile"
  [ ! -r "$gold_racolfile" ] && tax2racol -t "$taxdir" -u "" --ranks "$ranks" < "$gold_taxfile" > "$gold_racolfile"

  # generate taxonomic prediction files
  binning2tsv --type "$btype" < "$query_bin_file" > "$pred_taxfile"
  tax2racol -t "$taxdir" -u "$pred_ic" --ranks "$ranks" < "$pred_taxfile" > "$pred_racolfile"
  
  # generate confusion matrix
  echo "generate confusion matrix"
  cmatfile="$tmpdir/${prefix}pred.cmat"
  confusionmatrix -c "$pred_ic" --rows "$gold_racolfile" --columns "$pred_racolfile" --weights "$seq_len_file" --matrix-form quadratic --allow-missing-columns > "$cmatfile"

  # evaluation
  echo "eval "
  count-depth_true_false_unknown -c "$pred_ic" --labels "$gold_racolfile" --predictions "$pred_racolfile" --weights "$seq_len_file" --scale .001 --with-unknown-labels > "${prefix}absolute_counts.tsv" #, in kb
  count-depth_true_false_unclassified_unknown -c "$pred_ic" --labels "$gold_racolfile" --predictions "$pred_racolfile" --weights "$seq_len_file" --scale .001 --with-unknown-labels > "${prefix}absolute_counts_per_rank.tsv" #, in kb

  echo "per bin"
  cmat2perbinstats -i "$pred_ic" < "$cmatfile" > "${prefix}perbin_stats.tsv"

  echo "summary"
  cmat2summarystats -t 0.95 -i ",$pred_ic" < "$cmatfile" > "${prefix}summary_stats_95.tsv"
  cmat2summarystats -t 0.99 -i ",$pred_ic" < "$cmatfile" > "${prefix}summary_stats_99.tsv"
  cmat2summarystats -i ",$pred_ic" < "$cmatfile" > "${prefix}summary_stats.tsv"

  echo "ari"
  cmat2unsupervised --ignore-class ",$pred_ic" < "$cmatfile" > "${prefix}unsupervised_precision_stats.tsv"
  cmat2unsupervised --ignore-class "" < "$cmatfile" > "${prefix}unsupervised_recall_stats.tsv"

  echo "heatmap"
  cmat2heatmap --description '' --basename "${prefix}cmat_heatmap_" --format svg < "$cmatfile"
}


func_unsupervised ()
{
  gold_bin_file=$1
  query_bin_file=$2
  seq_len_file=$3
  prefix=$4
  # echo "unsupervised g:$gold_bin_file q:$query_bin_file"
  taxdir="$bbx_arguments_databases_taxonomy_path"

  if ! [ -d "$taxdir" -a -r "$taxdir/names.dmp" -a -r "$taxdir/nodes.dmp" ]; then
    echo "Cannot read input taxonomy in '$taxdir'."
    exit 1
  fi

  # simple variables
  #pred_ic="unclassified"
  ranks='species,genus,family,order,class,phylum,superkingdom'
  taxversion="$(taxonomy_version "$taxdir/nodes.dmp")"
  #gold_tabfile="$cache/${prefix}gold_${goldversion}.tsv"
  pred_tabfile="$tmpdir/${prefix}pred.tsv"
  pred_racolfile="$tmpdir/${prefix}pred.racol"

  # cached variables
  gold_taxfile="$cache/${prefix}gold_${goldversion}.tax"
  gold_racolfile="$cache/${prefix}gold_${goldversion}_${taxversion}.racol"

  # refresh cache
  #[ ! -r "$gold_tabfile" ] && binning2tsv --type classname < "$gold_bin_file" > "$gold_tabfile"
  [ ! -r "$gold_taxfile" ] && binning2tsv --type taxon < "${gold_bin_file}" > "$gold_taxfile"
  #temp_file="$tmpdir/${prefix}temp.tax"
  # > "$temp_file"
  echo -e "#identifier\tstrain\tspecies\tgenus\tfamily\torder\tclass\tphylum\tsuperkingdom" > "$gold_racolfile"
  paste <(binning2tsv --type classname < "${gold_bin_file}") <(tax2racol -t "$taxdir" -u "" --ranks "$ranks" < "$gold_taxfile" | tail -n +2 | cut -f 2-) >> "$gold_racolfile"

  # generate prediction file
  binning2tsv --type classname < "$query_bin_file" > "$pred_tabfile"
  echo -e "#identifier\tstrain\tspecies\tgenus\tfamily\torder\tclass\tphylum\tsuperkingdom" > "$pred_racolfile"
  awk -F $'\t' '{printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$2,$2,$2,$2,$2,$2,$2)}' "${pred_tabfile}" >> "$pred_racolfile"
  # paste <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") >> "$gold_racolfile"

  # generate confusion matrix
  cmatfile="$tmpdir/${prefix}pred.cmat"
  #confusionmatrix --title 'binning' --rows "$gold_tabfile" --columns "$pred_tabfile" --weights "$seq_len_file" --matrix-form sparse --allow-missing-columns --sort-columns --sort-rows > "$cmatfile"
  confusionmatrix -c "$pred_ic" --rows "$gold_racolfile" --columns "$pred_racolfile" --weights "$seq_len_file" --matrix-form sparse --allow-missing-columns > "$cmatfile"

  # evaluation
  cmat2unsupervised --ignore-class ",$pred_ic" < "$cmatfile" > "${prefix}unsupervised_precision_stats.tsv"
  cmat2unsupervised --ignore-class "" < "$cmatfile" > "${prefix}unsupervised_recall_stats.tsv"
  cmat2heatmap --description '' --basename "${prefix}cmat_heatmap_" --format svg --nolabels --unsupervised < "$cmatfile"
}

func_unsupervised_hybrid ()
{
  gold_bin_file=$1
  query_bin_file=$2
  seq_len_file=$3
  prefix=$4
  # echo "unsupervised g:$gold_bin_file q:$query_bin_file"
  taxdir="$bbx_arguments_databases_taxonomy_path"

  if ! [ -d "$taxdir" -a -r "$taxdir/names.dmp" -a -r "$taxdir/nodes.dmp" ]; then
    echo "Cannot read input taxonomy in '$taxdir'."
    exit 1
  fi

  # simple variables
  #pred_ic="unclassified"
  ranks='species,genus,family,order,class,phylum,superkingdom'
  taxversion="$(taxonomy_version "$taxdir/nodes.dmp")"
  pred_taxfile="$tmpdir/${prefix}pred.tax"
  pred_racolfile="$tmpdir/${prefix}pred.racol"
  #taxsqlite="$cache/ncbi-taxonomy_${taxversion}.sqlite"

  # cached variables
  gold_taxfile="$cache/${prefix}gold_${goldversion}.tax"
  gold_racolfile="$cache/${prefix}gold_${goldversion}_${taxversion}.racol"

  # refresh cache
  #[ ! -r "$taxsqlite" ] && ncbitax2sqlite -dmp "$taxdir" -db "$taxsqlite"
  [ ! -r "$gold_taxfile" ] && binning2tsv --type taxon < "${gold_bin_file}" > "$gold_taxfile"
  #temp_file="$tmpdir/${prefix}temp.tax"
  #tax2racol -t "$taxdir" -u "" --ranks "$ranks" < "$gold_taxfile" > "$temp_file"
  echo -e "#identifier\tstrain\tspecies\tgenus\tfamily\torder\tclass\tphylum\tsuperkingdom" > "$gold_racolfile"
  paste <(binning2tsv --type classname < "${gold_bin_file}") <(tax2racol -t "$taxdir" -u "" --ranks "$ranks" < "$gold_taxfile" | tail -n +2 | cut -f 2-) >> "$gold_racolfile"
  #paste <(binning2tsv --type classname < "${gold_bin_file}") <(tail -n +2 "$temp_file" | cut -d -f 2-) >> "$gold_racolfile"

  #awk -F $'\t' '{printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$2,$2,$2,$2,$2,$2)}' "${gold_taxfile}" >> "$gold_racolfile"
  # paste <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") <(cut -f2 "${gold_bin_file}") >> "$gold_racolfile"

  # generate taxonomic prediction files
  binning2tsv --type taxon < "$query_bin_file" > "$pred_taxfile"
  echo -e "#identifier\tstrain\tspecies\tgenus\tfamily\torder\tclass\tphylum\tsuperkingdom" > "$pred_racolfile"
  paste <(binning2tsv --type taxon < "${query_bin_file}") <(tax2racol -t "$taxdir" -u "$pred_ic" --ranks "$ranks" < "$pred_taxfile" | tail -n +2 | cut -f 2-) >> "$pred_racolfile"
  #                                                            tax2racol -t "$taxdir" -u "$pred_ic" --ranks "$ranks" < "$pred_taxfile" > "$pred_racolfile"

  # generate confusion matrix
  cmatfile="$tmpdir/${prefix}pred.cmat"
  confusionmatrix -c "$pred_ic" --rows "$gold_racolfile" --columns "$pred_racolfile" --weights "$seq_len_file" --matrix-form sparse --allow-missing-columns > "$cmatfile"

  # evaluation
  cmat2unsupervised --ignore-class ",$pred_ic" < "$cmatfile" > "${prefix}unsupervised_precision_stats.tsv"
  cmat2unsupervised --ignore-class "" < "$cmatfile" > "${prefix}unsupervised_recall_stats.tsv"
  #cmat2heatmap --description '' --basename "${prefix}cmat_heatmap_" --format svg --nolabels --unsupervised < "$cmatfile"
}


func_split ()
{
  func_eval="$1"
  file_path_categories="$2"
  template="$3"
  prefix_index=0
  SPLIT_WORK="$tmpdir/split_work.tsv"
  #if [[ "$func_eval" =~ .*unsupervised.* ]]func_unsupervised
  if [[ "$func_eval" == "func_unsupervised" ]]
  then
    sort_by_novelty.py \
    -n "$file_path_categories" -g "$gold_binningfile" -q "$pred_binningfile" -s "$seqlenfile" \
    -o "$tmpdir" > "$SPLIT_WORK"
  else
    sort_by_novelty.py \
    -n "$file_path_categories" -g "$gold_binningfile" -q "$pred_binningfile" -s "$seqlenfile" \
    -o "$tmpdir" "-tax" > "$SPLIT_WORK"
  fi
  echo "---" > "biobox.yaml"
  echo "version: 0.10.0" >> "biobox.yaml"
  echo "results:" >> "biobox.yaml"
  while IFS=$'\t' read novelty gold_path query_path seqlen_file;
  do
    echo "$novelty"
    "$func_eval" "$gold_path" "$query_path" "$seqlen_file" "${prefix_index}_"
    format_text.py "$template" "${prefix_index}_" "$novelty" >> "biobox.yaml"
    prefix_index=$((prefix_index+1))
  done < "$SPLIT_WORK"
}

if [ "$eval_mode" == "unsupervised_to_taxonomic" ]; then # transform to taxonomic and run accordingly
  python "$BBX_OPTDIR/cami-evaluate-binning/bin/tax_from_unsupervised.py" "$pred_binningfile" "$gold_binningfile" "$tmpdir/tmp_binning"
  func_supervised "$gold_binningfile" "$tmpdir/tmp_binning" "$seqlenfile" "" "classname"
  cp "$BBX_OPTDIR/cami-evaluate-binning/yaml/taxonomic.yaml" biobox.yaml
elif [ "$eval_mode" == "taxonomic" ]; then  # taxonomic binning
  echo "taxonomic"
  func_supervised "$gold_binningfile" "$pred_binningfile" "$seqlenfile" ""
  cp "$BBX_OPTDIR/cami-evaluate-binning/yaml/taxonomic.yaml" biobox.yaml
elif [ "$eval_mode" == "unsupervised" ]; then # unsupervised binning
  echo "unsupervised"
  func_unsupervised "$gold_binningfile" "$pred_binningfile" "$seqlenfile" ""
  cp "$BBX_OPTDIR/cami-evaluate-binning/yaml/unsupervised.yaml" biobox.yaml
elif [ "$eval_mode" == "hybrid" ]; then # hybrid binning
  echo "unsupervised_hybrid"
  func_unsupervised_hybrid "$gold_binningfile" "$pred_binningfile" "$seqlenfile" ""
  cp "$BBX_OPTDIR/cami-evaluate-binning/yaml/unsupervised.yaml" biobox.yaml
elif [ "$eval_mode" == "taxonomic_novelties" ]; then  # taxonomic binning
  echo "taxonomic_novelties"
  file_path_category="$BBX_OPTDIR/novelty_complete.tsv"
  file_path_template="$BBX_OPTDIR/cami-evaluate-binning/yaml/taxonomic_template.yaml"
  func_split func_supervised "$file_path_category" "$file_path_template"
elif [ "$eval_mode" == "taxonomic_uniqueness" ]; then  # taxonomic binning
  echo "taxonomic_novelties"
  file_path_category="$BBX_OPTDIR/unique_common.tsv"
  file_path_template="$BBX_OPTDIR/cami-evaluate-binning/yaml/taxonomic_template.yaml"
  func_split func_supervised "$file_path_category" "$file_path_template"
elif [ "$eval_mode" == "unsupervised_uniqueness" ]; then # unsupervised binning
  echo "unsupervised_novelties"
  file_path_category="$BBX_OPTDIR/unique_common.tsv"
  file_path_template="$BBX_OPTDIR/cami-evaluate-binning/yaml/unsupervised_template.yaml"
  func_split func_unsupervised "$file_path_category" "$file_path_template"
elif [ "$eval_mode" == "unsupervised_novelties" ]; then # unsupervised binning
  echo "unsupervised_novelties"
  file_path_category="$BBX_OPTDIR/novelty_complete.tsv"
  file_path_template="$BBX_OPTDIR/cami-evaluate-binning/yaml/unsupervised_template.yaml"
  func_split func_unsupervised "$file_path_category" "$file_path_template"
elif [ "$eval_mode" == "hybrid_uniqueness" ]; then # unsupervised binning
  echo "unsupervised_hybrid_novelties"
  file_path_category="$BBX_OPTDIR/unique_common.tsv"
  file_path_template="$BBX_OPTDIR/cami-evaluate-binning/yaml/unsupervised_template.yaml"
  func_split func_unsupervised_hybrid "$file_path_category" "$file_path_template"
elif [ "$eval_mode" == "hybrid_novelties" ]; then # unsupervised binning
  echo "unsupervised_hybrid_novelties"
  file_path_category="$BBX_OPTDIR/novelty_complete.tsv"
  file_path_template="$BBX_OPTDIR/cami-evaluate-binning/yaml/unsupervised_template.yaml"
  func_split func_unsupervised_hybrid "$file_path_category" "$file_path_template"
else
  echo "Bad eval_mode"
  exit 1
fi

# cleanup
if [ -n "${BBX_DBGMODE:-}" ] && [ "$BBX_DBGMODE" -gt 0 ]; then  # guarantee integer in newer base image
  BBX_DBGDIR="$BBX_MNTDIR/debug"  # will be defined in newer base image
  mkdir -p "$BBX_DBGDIR"  # will exist in newer base image
  mv "$tmpdir/"* "$BBX_DBGDIR/"
else
  rm -r "$tmpdir"
fi
