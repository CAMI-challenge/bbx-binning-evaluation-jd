#!/bin/bash
#
#   evaluate-binning.bash - Generates statistics for binning results and writes
#                           them in a CAMI-compliant form, for use in a Docker
#                           container
#
#   Written in 2015 by Johannes Dr√∂ge johannes.droege@uni-duesseldorf.de
#
#   To the extent possible under law, the author(s) have dedicated all copyright
#   and related and neighboring rights to this software to the public domain
#   worldwide. This software is distributed without any warranty.
#
#   You should have received a copy of the CC0 Public Domain Dedication along
#   with this software. If not, see
#   http://creativecommons.org/publicdomain/zero/1.0/

set -o errexit
set -o nounset

required_programs="ncbitax2sqlite tax2racol confusionmatrix cmat2perbinstats cmat2summarystats fasta-seqlen fastq-seqlen sort md5sum binning2tsv"
# Check for required programs
for cmd in $required_programs; do
  if test -z "$(which "$cmd")"; then
    echo "'$cmd' not found in PATH."
    exit 1
  fi
done

# functions
taxonomy_version() { cat "$@" | awk -F '\t' '{if($1 != $3) print $1 "\t" $3}' | LC_COLLATE=C sort -u | md5sum | cut -d ' ' -f 1; }  # taxonomy hash

# input variables
cache="$BBX_CACHEDIR"
fastafile="$bbx_arguments_sequences_path"
gold_binningfile="$bbx_arguments_labels_path"
pred_binningfile="$bbx_arguments_predictions_path"

# some assertions
if [ ! "$(cut -d '.' -f 1-2 <<<$bbx_version)" == '0.10' ]; then
  echo "Bioboxes.org input definition is '$bbx_version', not '0.9'."
  exit 1
fi

if [ ! -r "$gold_binningfile" ]; then
  echo "Cannot read input label binning file '$gold_binningfile'."
  exit 1
fi

if [ ! -r "$pred_binningfile" ]; then
  echo "Cannot read input prediction binning file '$pred_binningfile'."
  exit 1
fi

if [ ! -r "$fastafile" ]; then
  echo "Cannot read input FASTA file '$fastafile'."
  exit 1
fi


# general cached variables
goldversion="$(md5sum < "$gold_binningfile" | cut -d ' ' -f 1)"
seqlenfile="$cache/gold_${goldversion}.seqlen"

# general temporary variables
tmpdir="$(mktemp -d)"
cmatfile="$tmpdir/pred.cmat"

# general refresh cache
if [[ $fastafile == *.gz ]]; then # compressed
	if [[ $bbx_arguments_sequences_id == "fastq" ]]; then
		[ ! -r "$seqlenfile" ] && awk 'NR % 4 == 1 || NR % 4 == 2' <(gzip -dc $fastafile) | fastq-seqlen > "$seqlenfile"
	elif [ $bbx_arguments_sequences_id == "fasta" ]; then
		[ ! -r "$seqlenfile" ] && zcat $fastafile | fasta-seqlen > "$seqlenfile"
	else
		echo "Unknown: $bbx_arguments_sequences_id"
		exit 1
	fi
else # raw file
	if [[ $bbx_arguments_sequences_id == "fastq" ]]; then
		#echo "fastq"
		[ ! -r "$seqlenfile" ] && awk 'NR % 4 == 1 || NR % 4 == 2' $fastafile | fastq-seqlen > "$seqlenfile"
	elif [ $bbx_arguments_sequences_id == "fasta" ]; then
		#echo "fasta"
		[ ! -r "$seqlenfile" ] && cat $fastafile | fasta-seqlen > "$seqlenfile"
	else # fasta
		echo "Unknown: $bbx_arguments_sequences_id"
		exit 1
	fi
fi

if [ "$eval_mode" == "taxonomic" ]; then  # taxonomic binning
  taxdir="$bbx_arguments_databases_taxonomy_path"
  
  if ! [ -d "$taxdir" -a -r "$taxdir/names.dmp" -a -r "$taxdir/nodes.dmp" ]; then
    echo "Cannot read input taxonomy in '$taxdir'."
    exit 1
  fi

  # simple variables
  ranks='species,genus,family,order,class,phylum,superkingdom'
  pred_taxfile="$tmpdir/pred.tax"
  pred_racolfile="$tmpdir/pred.racol"
  taxversion="$(taxonomy_version "$taxdir/nodes.dmp")"
  #taxsqlite="$cache/ncbi-taxonomy_${taxversion}.sqlite"

  # cached variables
  gold_taxfile="$cache/gold_${goldversion}.tax"
  gold_racolfile="$cache/gold_${goldversion}_${taxversion}.racol"
  
  # refresh cache
  #[ ! -r "$taxsqlite" ] && ncbitax2sqlite -dmp "$taxdir" -db "$taxsqlite"
  [ ! -r "$gold_taxfile" ] && binning2tsv --type taxon < "$gold_binningfile" > "$gold_taxfile"
  [ ! -r "$gold_racolfile" ] && tax2racol -t "$taxdir" --ranks "$ranks" < "$gold_taxfile" > "$gold_racolfile"

  # generate taxonomic prediction files
  binning2tsv --type taxon < "$pred_binningfile" > "$pred_taxfile"
  tax2racol -t "$taxdir" --ranks "$ranks" < "$pred_taxfile" > "$pred_racolfile"
  
  # generate confusion matrix
  confusionmatrix --rows "$gold_racolfile" --columns "$pred_racolfile" --weights "$seqlenfile" --matrix-form quadratic --allow-missing-columns > "$cmatfile"

  # evaluation
  count-depth_true_false_unknown --labels "$gold_racolfile" --predictions "$pred_racolfile" --weights "$seqlenfile" --scale .001 > absolute_counts.tsv #--with-unknown-labels, in kb
  cmat2perbinstats < "$cmatfile" > 'perbin_stats.tsv'
  cmat2summarystats -t 0.95 < "$cmatfile" > "summary_stats_95.tsv"
  cmat2summarystats -t 0.99 < "$cmatfile" > "summary_stats_99.tsv"
  cmat2heatmap --description '' --basename 'cmat_heatmap_' --format svg < "$cmatfile"
  cmat2unsupervised < "$cmatfile" > 'unsupervised_stats.tsv'

  cp "$BBX_OPTDIR/cami-evaluate-binning/yaml/taxonomic.yaml" biobox.yaml
elif [ "$eval_mode" == "unsupervised" ]; then # unsupervised binning
  # simple variables
  gold_tabfile="$cache/gold_${goldversion}.tsv"
  pred_tabfile="$tmpdir/pred.tsv"

  # refresh cache
  [ ! -r "$gold_tabfile" ] && binning2tsv --type classname < "$gold_binningfile" > "$gold_tabfile"

  # generate prediction file
  binning2tsv --type classname < "$pred_binningfile" > "$pred_tabfile"

  # generate confusion matrix
  confusionmatrix --title 'binning' --rows "$gold_tabfile" --columns "$pred_tabfile" --weights "$seqlenfile" --matrix-form sparse --allow-missing-columns --sort-columns --sort-rows > "$cmatfile"

  # evaluation
  cmat2heatmap --description '' --basename 'cmat_heatmap_' --format svg --nolabels --unsupervised < "$cmatfile"
  cmat2unsupervised < "$cmatfile" > 'unsupervised_stats.tsv'

  cp "$BBX_OPTDIR/cami-evaluate-binning/yaml/unsupervised.yaml" biobox.yaml
elif [ "$eval_mode" == "hybrid" ]; then # hybrid binning
  # simple variables
  gold_tabfile="$cache/gold_${goldversion}.tsv"
  pred_tabfile="$tmpdir/pred.tsv"

  # refresh cache
  [ ! -r "$gold_tabfile" ] && binning2tsv --type classname < "$gold_binningfile" > "$gold_tabfile"

  # generate prediction file
  binning2tsv --type taxon < "$pred_binningfile" > "$pred_tabfile"

  # generate confusion matrix
  confusionmatrix --title 'binning' --rows "$gold_tabfile" --columns "$pred_tabfile" --weights "$seqlenfile" --matrix-form sparse --allow-missing-columns --sort-columns --sort-rows > "$cmatfile"

  # evaluation
  cmat2heatmap --description '' --basename 'cmat_heatmap_' --format svg --nolabels --unsupervised < "$cmatfile"
  cmat2unsupervised < "$cmatfile" > 'unsupervised_stats.tsv'

  cp "$BBX_OPTDIR/cami-evaluate-binning/yaml/unsupervised.yaml" biobox.yaml
else
  echo "Bad eval_mode"
  exit 1
fi

# cleanup
if [ -n "${BBX_DBGMODE:-}" ] && [ "$BBX_DBGMODE" -gt 0 ]; then  # guarantee integer in newer base image
  BBX_DBGDIR="$BBX_MNTDIR/debug"  # will be defined in newer base image
  mkdir -p "$BBX_DBGDIR"  # will exist in newer base image
  mv "$tmpdir/"* "$BBX_DBGDIR/"
else
  rm -r "$tmpdir"
fi
