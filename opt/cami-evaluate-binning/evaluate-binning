#!/bin/bash
#
#   evaluate-binning.bash - Generates statistics for binning results and writes
#                           them in a CAMI-compliant form, for use in a Docker
#                           container
#
#   Written in 2015 by Johannes Dr√∂ge johannes.droege@uni-duesseldorf.de
#
#   To the extent possible under law, the author(s) have dedicated all copyright
#   and related and neighboring rights to this software to the public domain
#   worldwide. This software is distributed without any warranty.
#
#   You should have received a copy of the CC0 Public Domain Dedication along
#   with this software. If not, see
#   http://creativecommons.org/publicdomain/zero/1.0/

set -o errexit
set -o nounset

required_programs="ncbitax2sqlite tax2racol confusionmatrix cmat2perbinstats cmat2summarystats fasta-seqlen sort md5sum"
# Check for required programs
for cmd in $required_programs; do
  if test -z "$(which "$cmd")"; then
    echo "'$cmd' not found in PATH."
    exit 1
  fi
done

# functions
taxonomy_version() { cat "$@" | awk -F '\t' '{if($1 != $3) print $1 "\t" $3}' | LC_COLLATE=C sort -u | md5sum | cut -d ' ' -f 1; }  # taxonomy hash
binning2tax() { cat $@ | grep -v -e '^@' -e '^#' -e '^$' | cut -f 1,2; } # bioboxes.org binning to simple TAB-separated

# input variables
ranks='species,genus,family,order,class,phylum,superkingdom'
cache="$BBX_CACHEDIR"
fastafile="$bbx_arguments_0_fasta_value"
gold_binningfile="$bbx_arguments_1_binning_0_value"
pred_binningfile="$bbx_arguments_1_binning_1_value"
taxdir="$bbx_arguments_3_databases_0_value"

# some assertions
if [ ! "$(cut -d '.' -f 1-2 <<<$bbx_version)" == '0.9' ]; then
  echo "Bioboxes.org input definition is '$bbx_version', not '0.9'."
  exit 1
fi

if [ ! -r "$gold_binningfile" ]; then
  echo "Cannot read input label binning file '$gold_binningfile'."
  exit 1
fi

if [ ! -r "$pred_binningfile" ]; then
  echo "Cannot read input prediction binning file '$pred_binningfile'."
  exit 1
fi

if [ ! -r "$fastafile" ]; then
  echo "Cannot read input FASTA file '$fastafile'."
  exit 1
fi

if ! [ -d "$taxdir" -a -r "$taxdir/names.dmp" -a -r "$taxdir/nodes.dmp" ]; then
  echo "Cannot read input taxonomy in '$taxdir'."
  exit 1
fi


# cached variables
taxversion="$(taxonomy_version "$taxdir/nodes.dmp")"
taxsqlite="$cache/ncbi-taxonomy_${taxversion}.sqlite"
goldversion="$(md5sum < "$gold_binningfile" | cut -d ' ' -f 1)"
gold_taxfile="$cache/gold_${goldversion}.tax"
gold_racolfile="$cache/gold_${goldversion}_${taxversion}.racol"
seqlenfile="$cache/gold_${goldversion}.seqlen"

# temporary variables
tmpdir="$(mktemp -d)"
pred_taxfile="$tmpdir/pred.tax"
pred_racolfile="$tmpdir/pred.racol"
cmatfile="$tmpdir/pred.cmat"

# refresh cache
[ ! -r "$taxsqlite" ] && ncbitax2sqlite -dmp "$taxdir" -db "$taxsqlite"
[ ! -r "$gold_taxfile" ] && binning2tax < "$gold_binningfile" > "$gold_taxfile"
[ ! -r "$gold_racolfile" ] && tax2racol --taxonomy-backend-file "$taxsqlite" --ranks "$ranks" < "$gold_taxfile" > "$gold_racolfile"
[ ! -r "$seqlenfile" ] && cat $fastafile | fasta-seqlen > "$seqlenfile"

# generate prediction intermediate files
binning2tax < "$pred_binningfile" > "$pred_taxfile"

if true; then  # TODO: only for taxonomic binning (read binning header)
  tax2racol --taxonomy-backend-file "$taxsqlite" --ranks "$ranks" < "$pred_taxfile" > "$pred_racolfile"
fi

confusionmatrix --rows "$gold_racolfile" --columns "$pred_racolfile" --weights "$seqlenfile" --matrix-form quadratic --allow-missing-columns > "$cmatfile"

# write stats
cmat2perbinstats < "$cmatfile" > 'perbin_stats.tsv'

cmat2summarystats -t 0.99 < "$cmatfile" > "summary_stats_99.tsv"

count-depth_true_false_unknown --labels "$gold_racolfile" --predictions "$pred_racolfile" --weights "$seqlenfile" --scale .001 > absolute_counts.tsv #--with-unknown-labels, in kb

cmat2heatmap --basename cmat_heatmap_ --format png < "$cmatfile"

cp "$BBX_OPTDIR/cami-evaluate-binning/output.yaml" ./ 

# cleanup
test -n "$tmpdir" && rm -r "$tmpdir"
