#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This script takes confusion matrices from the standard input
# in the form:
#
# title\tcol1name\tcol2name\tcol3name
# row1name\tfreq11\tfreq12\freq13
# row2name\tfreq21\tfreq22\freq23
#
# where \t means TAB separation and there can be as many rows/columns as you
# like.
#
# From the matrices it will compute common statistics to measure classification
# accuracy and output them in the input file order.
#
# Conventions:
# a) First upper left cell can hold a title (any string)
# b) There is a special class name that will be ignored in some of the
#    statistics (defaults to empty string "")
# c) Any empty line marks the end of the last matrix and following lines are
#    interpreted as a new matrix.
# d) Lines starting with "#" are considered comments and are allowed anywhere
#    but inside the matrices 

from sys import argv, stdout, stderr, stdin, exit
from classevaltools import parseConfusionMatrix
from math import ceil


if __name__ == "__main__":
    import getopt

    ignore_class = ""

    # output extensive statistics table
    print "instance\tclass\tprecision\trecall\tpredicted class size\treal class size"
    upsize = ursize = 0
    for cmat in parseConfusionMatrix(stdin):
        tmpstore = []
        for name, psize, pcorrect in cmat.precision_freqs():
            if name != ignore_class:
                prec = pcorrect / float(psize)
                rsize, rcorrect = cmat.recall_freq(name)
                assert rcorrect == pcorrect
                rec = rcorrect / float(rsize)
                tmpstore.append((psize, rsize, prec, rec, name))
            else:
                upsize = psize
                ursize = cmat.recall_freq(name)[0]

        for psize, rsize, prec, rec, name in sorted(tmpstore, reverse=True):
          print "%s\t%s\t%.2f\t%.2f\t%i\t%i" % (cmat.title, name, prec, rec, psize, rsize)
        if upsize or ursize:
          print "%s\tunassigned\tnan\tnan\t%i\t%i" % (cmat.title, upsize, ursize)

